package rxwriter.drug;

import org.junit.jupiter.api.*;
import org.mockito.Mockito;
import rxwriter.drug.database.DrugRecord;
import rxwriter.drug.database.DrugSource;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
//import static org.mockito.Mockito.*;

@DisplayName("DrugService should xyz")
class DrugServiceTest implements DrugSource {

    private DrugService drugService;
    @BeforeEach //here, @BeforeEach is not used for the third test, could rewrite having  .this reference as part of before each, in place of Mockito objects
    void setup(){
        List<DrugRecord> drugsFound = new ArrayList<>();
        drugsFound.add(new DrugRecord("asmanex", new int[] {301}, 0));
        drugsFound.add(new DrugRecord("aspirin", new int[] {3645, 3530}, 0));
        DrugSource mockDrugSource = Mockito.mock(DrugSource.class);
        Mockito.when(mockDrugSource.findDrugsStartingWith("as"))
                .thenReturn(drugsFound);
        drugService = new DrugService(mockDrugSource);
    }

    @Test
    @DisplayName("return drugs from the database sorted by drug name")
    @Tag("database") //this annotation will help and filter tests when running
    void drugsAreReturnedSorted(){
//        DrugService service = new DrugService(this);
//        List<DrugRecord> drugsFound = new ArrayList<>();
//        drugsFound.add(new DrugRecord("asmanex", new int[] {301}, 0));
//        drugsFound.add(new DrugRecord("aspirin", new int[] {3645, 3530}, 0));
//        DrugSource mockDrugSource = Mockito.mock(DrugSource.class);
//        Mockito.when(mockDrugSource.findDrugsStartingWith("as"))
//                .thenReturn(drugsFound);
//        DrugService service = new DrugService(mockDrugSource);
        List<DispensableDrug> foundDrugs = drugService.findDrugsStartingWith("as");
        assertNotNull(foundDrugs);
        assertEquals(2, foundDrugs.size());
        assertEquals("asmanex", foundDrugs.get(0).drugName());
        assertEquals("aspirin", foundDrugs.get(1).drugName());
    }

//    @Disabled("put in the reason like so")  //this tag temporarily disables this specific test
    @Nested
    @DisplayName("throw an illegal argument exception")
    class ThrowsExceptionTests{
        @Test
        @DisplayName("when passed a blank string for startingWith")
        void throwsExceptionOnBlankStartsWith(){
    //        DrugService service = new DrugService(this);
            Exception thrown = assertThrows(IllegalArgumentException.class, ()-> drugService.findDrugsStartingWith(" "));
            System.out.println(thrown.getMessage());
        }
        @Test
        @DisplayName("when passed an empty string for startingWith")
        void throwsExceptionOnEmptyStartsWith(){
            //        DrugService service = new DrugService(this);
            Exception thrown = assertThrows(IllegalArgumentException.class, ()-> drugService.findDrugsStartingWith(""));
            System.out.println(thrown.getMessage());
        }
}


    @Test
    @DisplayName("when passed an empty string for startingWith")
    void setsDrugPropertiesCorrectly(){
        DrugService service = new DrugService(this);
        List<DispensableDrug> foundDrugs = service.findDrugsStartingWith("aspirin");
        DrugClassification[] expectedClassifications = new DrugClassification[] {
                DrugClassification.ANALGESIC,DrugClassification.PLATELET_AGGREGATION_INHIBITORS
        };
        DispensableDrug drug = foundDrugs.get(0);
        assertAll("Dispensable properties",
                () -> assertEquals("aspirin", drug.drugName()),
                () -> assertFalse(drug.isControlled()),
                () -> assertEquals(2, drug.drugClassifications().length),
                () -> assertArrayEquals(expectedClassifications, drug.drugClassifications())
        );
    }

    @Override
    public List<DrugRecord> findDrugsStartingWith(String startingString) {
        List<DrugRecord> records = new ArrayList<>();
        if (startingString.equals ("as")) {
            records.add(new DrugRecord("asmanex", new int[] {301}, 0));
            records.add(new DrugRecord("aspirin", new int[] {3645, 3530}, 0));
        }
        else if (startingString.equals("aspirin")){
            records.add(new DrugRecord("aspirin", new int[] {3645, 3530}, 0));
        }
        return records;
    }
}
